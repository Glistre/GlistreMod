package com.glistre.glistremod.biome;

import java.util.ArrayList;
import java.util.List;

import com.glistre.glistremod.init.BiomeRegistry;

import net.minecraft.init.Biomes;
import net.minecraft.util.WeightedRandom;
import net.minecraft.world.WorldType;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
import net.minecraftforge.common.BiomeManager;
import net.minecraftforge.common.BiomeManager.BiomeEntry;
import net.minecraftforge.common.BiomeDictionary;


public class GlistreGenLayerBiome extends GenLayer
{
    private List<BiomeEntry>[] biomes = new ArrayList[BiomeManager.BiomeType.values().length];

    public GlistreGenLayerBiome(long seed, GenLayer parentlayer, WorldType worldtype)
    {
        super(seed);
        
        this.parent = parentlayer;
        
        for (BiomeManager.BiomeType type : BiomeManager.BiomeType.values())
        {
            com.google.common.collect.ImmutableList<BiomeEntry> biomesToAdd = BiomeManager.getBiomes(type);
            int idx = type.ordinal();
            
            if (biomes[idx] == null) biomes[idx] = new ArrayList<BiomeEntry>();
            if (biomesToAdd != null) biomes[idx].addAll(biomesToAdd);
        }
        
        int desertIdx = BiomeManager.BiomeType.DESERT.ordinal();
        
        if (worldtype == WorldType.DEFAULT_1_1)
        {
            biomes[desertIdx].add(new BiomeEntry(Biomes.DESERT, 10));
            biomes[desertIdx].add(new BiomeEntry(Biomes.FOREST, 10));
            biomes[desertIdx].add(new BiomeEntry(Biomes.EXTREME_HILLS, 10));
            biomes[desertIdx].add(new BiomeEntry(Biomes.SWAMPLAND, 10));
            biomes[desertIdx].add(new BiomeEntry(Biomes.PLAINS, 10));
            biomes[desertIdx].add(new BiomeEntry(Biomes.TAIGA, 10));
            biomes[desertIdx].add(new BiomeEntry(BiomeRegistry.biomeGlistre, 10));
            biomes[desertIdx].add(new BiomeEntry(BiomeRegistry.biomeFreon, 10));

                  
        
        }
        else
        {
            biomes[desertIdx].add(new BiomeEntry(Biomes.DESERT, 30));
            biomes[desertIdx].add(new BiomeEntry(Biomes.SAVANNA, 20));
            biomes[desertIdx].add(new BiomeEntry(Biomes.PLAINS, 10));
            biomes[desertIdx].add(new BiomeEntry(BiomeRegistry.biomeGlistre, 10));  
            biomes[desertIdx].add(new BiomeEntry(BiomeRegistry.biomeFreon, 10));

        }
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight) {
		return null;
	}

    protected static boolean biomesEqualOrMesaPlateau(int biomeIDA, int biomeIDB)
    {
        if (biomeIDA == biomeIDB)
        {
            return true;
        }
        else
        {
            Biome biome = Biome.getBiome(biomeIDA);
            Biome biome1 = Biome.getBiome(biomeIDB);
            return biome != null && biome1 != null ? (biome != Biomes.MESA_ROCK && biome != Biomes.MESA_CLEAR_ROCK ? biome == biome1 || biome.getBiomeClass() == biome1.getBiomeClass() : biome1 == Biomes.MESA_ROCK || biome1 == Biomes.MESA_CLEAR_ROCK) : false;
        }
    }
/*    public int[] getInts(int p_75904_1_, int p_75904_2_, int p_75904_3_, int p_75904_4_)
    {
        int[] aint = this.parent.getInts(p_75904_1_, p_75904_2_, p_75904_3_, p_75904_4_);
        int[] aint1 = IntCache.getIntCache(p_75904_3_ * p_75904_4_);

        for (int i1 = 0; i1 < p_75904_4_; ++i1)
        {
            for (int j1 = 0; j1 < p_75904_3_; ++j1)
            {
                this.initChunkSeed((long)(j1 + p_75904_1_), (long)(i1 + p_75904_2_));
                int k1 = aint[j1 + i1 * p_75904_3_];
                int l1 = (k1 & 3840) >> 8;
                k1 &= -3841;

                if (isBiomeOceanic(k1))
                {
                    aint1[j1 + i1 * p_75904_3_] = k1;
                }
                else if (k1 == Biomes.MUSHROOM_ISLAND.biomeID)
                {
                    aint1[j1 + i1 * p_75904_3_] = k1;
                }
                else if (k1 == 1)
                {
                    if (l1 > 0)
                    {
                        if (this.nextInt(3) == 0)
                        {
                            aint1[j1 + i1 * p_75904_3_] = Biome.mesaPlateau.biomeID;
                        }
                        else
                        {
                            aint1[j1 + i1 * p_75904_3_] = Biome.mesaPlateau_F.biomeID;
                        }
                    }
                    else
                    {
                        aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry(BiomeManager.BiomeType.DESERT).biome.biomeID;
                    }
                }
                else if (k1 == 2)
                {
                    if (l1 > 0)
                    {
                        aint1[j1 + i1 * p_75904_3_] = Biomes.JUNGLE.getIdForBiome(Biomes.JUNGLE);
                    }
                    else
                    {
                        aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry(BiomeManager.BiomeType.WARM).biome.biomeID;
                    }
                }
                else if (k1 == 3)
                {
                    if (l1 > 0)
                    {
                        aint1[j1 + i1 * p_75904_3_] = Biome.megaTaiga.biomeID;
                    }
                    else
                    {
                        aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry(BiomeManager.BiomeType.COOL).biome.biomeID;
                    }
                }
                else if (k1 == 4)
                {
                    aint1[j1 + i1 * p_75904_3_] = getWeightedBiomeEntry(BiomeManager.BiomeType.ICY).biome.biomeID;
                }
                else
                {
                    aint1[j1 + i1 * p_75904_3_] = Biome.mushroomIsland.biomeID;
                }
            }
        }

        return aint1;
    }*/
    
    protected BiomeEntry getWeightedBiomeEntry(BiomeManager.BiomeType type)
    {
        List<BiomeEntry> biomeList = biomes[type.ordinal()];
        int totalWeight = WeightedRandom.getTotalWeight(biomeList);
        int weight = BiomeManager.isTypeListModded(type)?nextInt(totalWeight):nextInt(totalWeight / 10) * 10;
        return (BiomeEntry)WeightedRandom.getRandomItem(biomeList, weight);
    }
}